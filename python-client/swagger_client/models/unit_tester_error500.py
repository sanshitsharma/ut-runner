# coding: utf-8

"""
    REST APIs for UT runner

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class UnitTesterError500(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'code': 'str',
        'severity': 'str',
        'message': 'str',
        'data': 'str'
    }

    attribute_map = {
        'code': 'code',
        'severity': 'severity',
        'message': 'message',
        'data': 'data'
    }

    def __init__(self, code=None, severity=None, message=None, data=None):  # noqa: E501
        """UnitTesterError500 - a model defined in Swagger"""  # noqa: E501

        self._code = None
        self._severity = None
        self._message = None
        self._data = None
        self.discriminator = None

        self.code = code
        self.severity = severity
        self.message = message
        if data is not None:
            self.data = data

    @property
    def code(self):
        """Gets the code of this UnitTesterError500.  # noqa: E501

        HTTP return code  # noqa: E501

        :return: The code of this UnitTesterError500.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this UnitTesterError500.

        HTTP return code  # noqa: E501

        :param code: The code of this UnitTesterError500.  # noqa: E501
        :type: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")  # noqa: E501

        self._code = code

    @property
    def severity(self):
        """Gets the severity of this UnitTesterError500.  # noqa: E501

        Error severity level  # noqa: E501

        :return: The severity of this UnitTesterError500.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this UnitTesterError500.

        Error severity level  # noqa: E501

        :param severity: The severity of this UnitTesterError500.  # noqa: E501
        :type: str
        """
        if severity is None:
            raise ValueError("Invalid value for `severity`, must not be `None`")  # noqa: E501
        allowed_values = ["Critical", "Warning", "Fatal"]  # noqa: E501
        if severity not in allowed_values:
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"  # noqa: E501
                .format(severity, allowed_values)
            )

        self._severity = severity

    @property
    def message(self):
        """Gets the message of this UnitTesterError500.  # noqa: E501

        Error message  # noqa: E501

        :return: The message of this UnitTesterError500.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this UnitTesterError500.

        Error message  # noqa: E501

        :param message: The message of this UnitTesterError500.  # noqa: E501
        :type: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message

    @property
    def data(self):
        """Gets the data of this UnitTesterError500.  # noqa: E501

        Details of the error  # noqa: E501

        :return: The data of this UnitTesterError500.  # noqa: E501
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this UnitTesterError500.

        Details of the error  # noqa: E501

        :param data: The data of this UnitTesterError500.  # noqa: E501
        :type: str
        """

        self._data = data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UnitTesterError500, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UnitTesterError500):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
