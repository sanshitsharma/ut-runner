# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class UnitTesterJobReadResp(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, job_id: str=None, status: str='scheduled', created_at: str=None, last_updated_at: str=None, last_update: str=None):  # noqa: E501
        """UnitTesterJobReadResp - a model defined in Swagger

        :param job_id: The job_id of this UnitTesterJobReadResp.  # noqa: E501
        :type job_id: str
        :param status: The status of this UnitTesterJobReadResp.  # noqa: E501
        :type status: str
        :param created_at: The created_at of this UnitTesterJobReadResp.  # noqa: E501
        :type created_at: str
        :param last_updated_at: The last_updated_at of this UnitTesterJobReadResp.  # noqa: E501
        :type last_updated_at: str
        :param last_update: The last_update of this UnitTesterJobReadResp.  # noqa: E501
        :type last_update: str
        """
        self.swagger_types = {
            'job_id': str,
            'status': str,
            'created_at': str,
            'last_updated_at': str,
            'last_update': str
        }

        self.attribute_map = {
            'job_id': 'job_id',
            'status': 'status',
            'created_at': 'created_at',
            'last_updated_at': 'last_updated_at',
            'last_update': 'last_update'
        }

        self._job_id = job_id
        self._status = status
        self._created_at = created_at
        self._last_updated_at = last_updated_at
        self._last_update = last_update

    @classmethod
    def from_dict(cls, dikt) -> 'UnitTesterJobReadResp':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The unit_testerJobReadResp of this UnitTesterJobReadResp.  # noqa: E501
        :rtype: UnitTesterJobReadResp
        """
        return util.deserialize_model(dikt, cls)

    @property
    def job_id(self) -> str:
        """Gets the job_id of this UnitTesterJobReadResp.

        Unique ID of the job  # noqa: E501

        :return: The job_id of this UnitTesterJobReadResp.
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id: str):
        """Sets the job_id of this UnitTesterJobReadResp.

        Unique ID of the job  # noqa: E501

        :param job_id: The job_id of this UnitTesterJobReadResp.
        :type job_id: str
        """

        self._job_id = job_id

    @property
    def status(self) -> str:
        """Gets the status of this UnitTesterJobReadResp.

        Current status of the job  # noqa: E501

        :return: The status of this UnitTesterJobReadResp.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this UnitTesterJobReadResp.

        Current status of the job  # noqa: E501

        :param status: The status of this UnitTesterJobReadResp.
        :type status: str
        """
        allowed_values = ["scheduled", "running", "successful", "failed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def created_at(self) -> str:
        """Gets the created_at of this UnitTesterJobReadResp.

        Time at which job was created  # noqa: E501

        :return: The created_at of this UnitTesterJobReadResp.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: str):
        """Sets the created_at of this UnitTesterJobReadResp.

        Time at which job was created  # noqa: E501

        :param created_at: The created_at of this UnitTesterJobReadResp.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def last_updated_at(self) -> str:
        """Gets the last_updated_at of this UnitTesterJobReadResp.

        Time at which the job was updated  # noqa: E501

        :return: The last_updated_at of this UnitTesterJobReadResp.
        :rtype: str
        """
        return self._last_updated_at

    @last_updated_at.setter
    def last_updated_at(self, last_updated_at: str):
        """Sets the last_updated_at of this UnitTesterJobReadResp.

        Time at which the job was updated  # noqa: E501

        :param last_updated_at: The last_updated_at of this UnitTesterJobReadResp.
        :type last_updated_at: str
        """

        self._last_updated_at = last_updated_at

    @property
    def last_update(self) -> str:
        """Gets the last_update of this UnitTesterJobReadResp.

        Latest update message for the job  # noqa: E501

        :return: The last_update of this UnitTesterJobReadResp.
        :rtype: str
        """
        return self._last_update

    @last_update.setter
    def last_update(self, last_update: str):
        """Sets the last_update of this UnitTesterJobReadResp.

        Latest update message for the job  # noqa: E501

        :param last_update: The last_update of this UnitTesterJobReadResp.
        :type last_update: str
        """

        self._last_update = last_update
